services:
  boardgamespring:
    image: boardgamespring:latest
    container_name: boardgame
    # maven
    build:
      context: ./
      dockerfile: Dockerfile
    # reflect port: inside port
    ports:
      - "8080:8080"
    command: ["java", "-jar", "/app.jar"]

# docker run -d --name redis -p 6379:6379 -v  \
#   - /root/docker/compose/redis/redis.conf:/etc/redis/redis.conf \
#   - /root/docker/compose/redis/data:/data \
#   --network my_network redis:latest redis-server /etc/redis/redis.conf
# 版本号
#version: "3"
# 服务列表，命令：docker run
#services:
#  # 服务名称，任意，不重复即可
#  redis:
#    # 指定服务名称，命令：--name redis
#    # 如果不指定，则将默认用docker-compose.yml所在文件夹名_服务名称_n命名
#    container_name: redis
#    # 指定镜像：命令 redis:latest
#    image: redis:latest
#    # 指定端口：命令 -p 主机端口:容器端口
#    ports:
#      - "6379:6379"
#    # 数据容器卷
#    volumes:
#      - /opt/homebrew/etc/redis.conf:/etc/redis/redis.conf
#      - /Users/chris071/Documents/Java-Project/CGA106G1/database/redis-data/:/data
#    # 加入指定网络，容器间必须要处于同一个网络才能通过容器名称进行调用
#    networks:
#      - my_network
#    # 运行命令
#    command: redis-server /etc/redis/redis.conf

#  mysql:
#    container_name: mysql
#    image: mysql:8.0.33
#    ports:
#      - "33306:3306"
#    environment:
#      # 等同于 -e MYSQL_ROOT_PASSWORD指定root的登录密码
#      MYSQL_ROOT_PASSWORD: 'aaa111'
#      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'
#      # 这里这个指令compose启动成功后会自动创建名为docker的数据库
#      MYSQL_DATABASE: 'boardgame'
#      # 此处就是相当于 mysql create user，创建了数据库的登录用户
#      MYSQL_USER: 'chris'
#      MYSQL_PASSWORD: '123456'
#    volumes:
#      # mount folder
#      - /Users/chris071/Documents/Java-Project/CGA106G1/mysql-data:/var/lib/mysql
#      - /Users/chris071/Documents/Java-Project/CGA106G1/mysql-init:/docker-entrypoint-initdb.d
#      - /opt/homebrew/etc/my.cnf:/etc/my.cnf
#    networks:
#      # 注意加入同一个网络
#      - my_network
#    # 解决外部无法访问
#    command: --default-authentication-plugin=mysql_native_password
#
## 创建网络
#networks:
#  # 默认将会创建为 docker-compose.yml所在 文件夹名_my_network 网络名称
#  my_network:
